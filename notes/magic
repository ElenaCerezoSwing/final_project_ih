#Mezclar todo y crear los grupos de entrenamiento y testing
train_X,test_X,train_Y,test_Y = train_test_split(X,y,test_size=0.2)
print('Training data shape : ', train_X.shape, train_Y.shape)
print('Testing data shape : ', test_X.shape, test_Y.shape)

train_X = train_X.astype('float32')
test_X = test_X.astype('float32')
train_X = train_X / 255.
test_X = test_X / 255.

# Change the labels from categorical to one-hot encoding
train_Y_one_hot = to_categorical(train_Y)
test_Y_one_hot = to_categorical(test_Y)

# Display the change for category label using one-hot encoding
print('Original label:', train_Y[0])
print('After conversion to one-hot:', train_Y_one_hot[0])

train_X,valid_X,train_label,valid_label = train_test_split(train_X, train_Y_one_hot, test_size=0.2, random_state=42)

print(train_X.shape,valid_X.shape,train_label.shape,valid_label.shape)




INIT_LR = 1e-3
epochs = 6
batch_size = 64

recycling_model = Sequential()
recycling_model.add(Conv2D(32, kernel_size=(3, 3),activation='linear',padding='same',input_shape=(500, 375,3)))
recycling_model.add(LeakyReLU(alpha=0.1))
recycling_model.add(MaxPooling2D((2, 2),padding='same'))
recycling_model.add(Dropout(0.5))

recycling_model.add(Flatten())
recycling_model.add(Dense(32, activation='linear'))
recycling_model.add(LeakyReLU(alpha=0.1))
recycling_model.add(Dropout(0.5)) 
recycling_model.add(Dense(nClasses, activation='softmax'))

recycling_model.summary()

recycling_model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adagrad(lr=INIT_LR, decay=INIT_LR / 100),metrics=['accuracy'])


recycling_train_dropout = recycling_model.fit(train_X, train_label, batch_size=batch_size,epochs=epochs,verbose=1,validation_data=(valid_X, valid_label))
 
# guardamos la red, para reutilizarla en el futuro, sin tener que volver a entrenar
recycling_model.save("recycling_mnist.h5py")